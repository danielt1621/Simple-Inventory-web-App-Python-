** IT Inventory web applciation v1. Daniel Tsavalos




General ideas and notes:

- 



V1------------------------------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IT Inventory Management</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        #itemForm {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        #itemForm input,
        #itemForm select {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        #itemForm button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #itemForm button:hover {
            background-color: #45a049;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        .action-buttons button {
            margin-right: 5px;
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .edit-btn {
            background-color: #FFA500;
            color: white;
        }

        .delete-btn {
            background-color: #f44336;
            color: white;
        }

        #filterForm {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
        }

        #filterForm input,
        #filterForm select {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        /* Notification styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border-radius: 5px;
            display: none;
        }

        .notification.error {
            background-color: #f44336;
        }

        /* Low stock alert styles */
        .low-stock-alert {
            background-color: #f44336;
            color: white;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
        }
    </style>
</head>

<body>



    <div class="container">
        <h1>IT Inventory Management</h1>

        <form id="itemForm">
            <input type="text" id="itemName" placeholder="Item Name" required>
            <input type="number" id="itemQuantity" placeholder="Quantity" required>
            <input type="text" id="itemAssignedTo" placeholder="Assigned To">
            <select id="itemCategory">
                <option value="">Select Category</option>
                <option value="Hardware">Hardware</option>
                <option value="Software">Software</option>
                <option value="Networking">Networking</option>
                <option value="Peripherals">Peripherals</option>
            </select>
            <button type="submit">Add Item</button>
        </form>

        <form id="filterForm">
            <input type="text" id="filterName" placeholder="Filter by Name">
            <select id="filterCategory">
                <option value="">All Categories</option>
                <option value="Hardware">Hardware</option>
                <option value="Software">Software</option>
                <option value="Networking">Networking</option>
                <option value="Peripherals">Peripherals</option>
            </select>
        </form>

        <table id="inventoryTable">
            <thead>
                <tr>
                    <th>Item Name</th>
                    <th>Quantity</th>
                    <th>Assigned To</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>





    <script>
        let inventory = [];
        const itemForm = document.getElementById('itemForm');
        const inventoryTable = document.getElementById('inventoryTable').getElementsByTagName('tbody')[0];
        const filterForm = document.getElementById('filterForm');

        // Load inventory data when the page loads
        window.addEventListener('DOMContentLoaded', (event) => {
            loadInventory();
        });

        // Fetch inventory data from server
        function loadInventory() {
            fetch('/load')
                .then(response => response.json())
                .then(data => {
                    inventory = data;
                    updateTable();
                })
                .catch(error => console.error('Error loading inventory:', error));
        }

        // Save inventory data to server
        function saveInventory() {
            fetch('/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(inventory)
            })
                .then(response => response.json())
                .then(data => console.log(data.message))
                .catch(error => console.error('Error saving inventory:', error));
        }

        const notificationElement = document.createElement('div');
        notificationElement.className = 'notification';
        document.body.appendChild(notificationElement);

        // Function to show notification
        function showNotification(message, isError = false) {
            notificationElement.textContent = message;
            notificationElement.classList.toggle('error', isError);
            notificationElement.style.display = 'block';
            setTimeout(() => {
                notificationElement.style.display = 'none';
            }, 3000);
        }




        // Call this function when the page loads to check all items
        window.addEventListener('DOMContentLoaded', (event) => {
            loadInventory();  // Load the inventory from the server
        });

        // Fetch inventory data from the server
        function loadInventory() {
            fetch('/load')
                .then(response => response.json())
                .then(data => {
                    inventory = data;
                    updateTable();
                    checkAllItemsForLowStock();  // Check for low stock after loading inventory
                })
                .catch(error => console.error('Error loading inventory:', error));
        }


        // Save inventory data to server
        function saveInventory() {
            fetch('/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(inventory)
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data.message);
                    checkAllItemsForLowStock();  // Re-check stock after saving inventory
                })
                .catch(error => console.error('Error saving inventory:', error));
        }





        // Low stock threshold
        const lowStockThreshold = 2;

    function checkLowStock(item) {
        if (item.quantity < lowStockThreshold) {
            showNotification(`Warning: Low stock for ${item.name}. Only ${item.quantity} left!`, true);
        }
    }




        // Update the low stock alerts when an item is added or modified
        itemForm.addEventListener('submit', function (e) {
            e.preventDefault();

            const itemName = document.getElementById('itemName').value.trim();
            const itemQuantity = parseInt(document.getElementById('itemQuantity').value.trim());

            // Validation checks
            if (!itemName) {
                showNotification('Item Name is required!', true);
                return;
            }
            if (itemQuantity <= 0) {
                showNotification('Quantity must be greater than 0!', true);
                return;
            }

            const itemAssignedTo = document.getElementById('itemAssignedTo').value;
            const itemCategory = document.getElementById('itemCategory').value;


            const newItem = {
                id: Date.now(),
                name: itemName,
                quantity: parseInt(itemQuantity),
                assignedTo: itemAssignedTo,
                category: itemCategory
            };

            inventory.push(newItem);
            updateTable();
            saveInventory(); // Save to server after each addition
            showNotification('Item added successfully!');
            //Check for low stock
            checkLowStock(newItem)
            itemForm.reset();
        });

        function updateTable(filteredInventory = inventory) {
            inventoryTable.innerHTML = '';
            filteredInventory.forEach(item => {
                const row = inventoryTable.insertRow();
                row.innerHTML = `
                    <td>${item.name}</td>
                    <td>${item.quantity}</td>
                    <td>${item.assignedTo}</td>
                    <td>${item.category}</td>
                    <td class="action-buttons">
                        <button class="edit-btn" onclick="editItem(${item.id})">Edit</button>
                        <button class="delete-btn" onclick="deleteItem(${item.id})">Delete</button>
                    </td>
                `;
            });
        }

        function editItem(id) {
            const item = inventory.find(item => item.id === id);
            if (item) {
                document.getElementById('itemName').value = item.name;
                document.getElementById('itemQuantity').value = item.quantity;
                document.getElementById('itemAssignedTo').value = item.assignedTo;
                document.getElementById('itemCategory').value = item.category;


                inventory = inventory.filter(item => item.id !== id);
                updateTable();
                saveInventory(); // Save to server after edit
                showNotification('Item edited successfully!');
                // Check for low stock
                checkLowStock(item);
            }
        }

        function deleteItem(id) {
            inventory = inventory.filter(item => item.id !== id);

            updateTable();
            saveInventory(); // Save to server after deletion
            removeLowStockAlert(id);  // Remove low stock alert if item is deleted
            showNotification('Item deleted successfully!');
        }







        filterForm.addEventListener('input', function () {
            const filterName = document.getElementById('filterName').value.toLowerCase();
            const filterCategory = document.getElementById('filterCategory').value;

            const filteredInventory = inventory.filter(item => {
                return item.name.toLowerCase().includes(filterName) &&
                    (filterCategory === '' || item.category === filterCategory);
            });

            updateTable(filteredInventory);
        });

        $(function () {
            $("#itemName").autocomplete({
                source: function (request, response) {
                    const term = request.term.toLowerCase();
                    const suggestions = inventory
                        .filter(item => item.name.toLowerCase().includes(term))
                        .map(item => item.name);
                    response(suggestions);
                },
                minLength: 2
            });
        });
    </script>


</body>

</html>





















V2------------------------------------


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IT Inventory Management</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        form { margin-bottom: 20px; }
        input, select, button { margin: 5px; padding: 5px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    </style>
</head>
<body>
    <h1>IT Inventory Management</h1>
    
    <form id="addItemForm">
        <input type="text" id="itemName" placeholder="Item Name" required>
        <input type="number" id="itemQuantity" placeholder="Quantity" required>
        <input type="text" id="itemAssignedTo" placeholder="Assigned To">
        <select id="itemCategory" required>
            <option value="">Select Category</option>
            <option value="Hardware">Hardware</option>
            <option value="Software">Software</option>
            <option value="Networking">Networking</option>
            <option value="Peripherals">Peripherals</option>
        </select>
        <button type="submit">Add Item</button>
    </form>

    <table id="inventoryTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Assigned To</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script>
        function loadInventory() {
            fetch('/api/items')
                .then(response => response.json())
                .then(data => {
                    const tbody = document.querySelector('#inventoryTable tbody');
                    tbody.innerHTML = '';
                    data.items.forEach(item => {
                        const row = tbody.insertRow();
                        row.insertCell(0).textContent = item.name;
                        row.insertCell(1).textContent = item.quantity;
                        row.insertCell(2).textContent = item.assignedTo;
                        row.insertCell(3).textContent = item.category;
                    });
                });
        }

        document.getElementById('addItemForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const newItem = {
                name: document.getElementById('itemName').value,
                quantity: parseInt(document.getElementById('itemQuantity').value),
                assignedTo: document.getElementById('itemAssignedTo').value,
                category: document.getElementById('itemCategory').value
            };

            fetch('/api/items', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newItem)
            })
            .then(response => response.json())
            .then(data => {
                console.log(data.message);
                loadInventory();
                e.target.reset();
            });
        });

        loadInventory();
    </script>
</body>
</html>
























from flask import Flask, jsonify, request, render_template
import json
import os

app = Flask(__name__)

FILE_PATH = 'inventory_data.json'

def load_inventory():
    if os.path.exists(FILE_PATH):
        with open(FILE_PATH, 'r') as file:
            return json.load(file)
    return {'items': []}

def save_inventory(inventory):
    with open(FILE_PATH, 'w') as file:
        json.dump(inventory, file)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/items', methods=['GET', 'POST'])
def items():
    if request.method == 'GET':
        return jsonify(load_inventory())
    elif request.method == 'POST':
        inventory = load_inventory()
        new_item = request.json
        inventory['items'].append(new_item)
        save_inventory(inventory)
        return jsonify({"message": "Item added successfully!"})

if __name__ == '__main__':
    app.run(debug=True)